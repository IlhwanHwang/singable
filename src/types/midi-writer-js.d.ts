/** Declaration file generated by dts-gen */

export class NoteEvent {
    constructor(fields: any);

    buildData(): any;

}

export class Track {
    constructor();

    addCopyright(text: any): any;

    addCuePoint(text: any): any;

    addEvent(events: any, mapFunction: any): any;

    addInstrumentName(text: any): any;

    addLyric(text: any): any;

    addMarker(text: any): any;

    addText(text: any): any;

    addTrackName(text: any): any;

    buildData(): any;

    mergeExplicitTickEvents(): any;

    mergeSingleEvent(event: any): void;

    mergeTrack(track: any): any;

    polyModeOn(): any;

    removeEventsByType(eventType: any): any;

    setKeySignature(sf: any, mi: any): any;

    setTempo(bpm: any): any;

    setTimeSignature(numerator: any, denominator: any, midiclockspertick: any, notespermidiclock: any): any;

}

export class VexFlow {
    constructor();

    convertDuration(note: any): any;

    convertPitch(pitch: any): any;

    trackFromVoice(voice: any): any;

}

export class Writer {
    constructor(tracks: any);

    base64(): any;

    buildFile(): any;

    dataUri(): any;

    saveMIDI(filename: any): void;

    stdout(): any;

}

export const Constants: {
    CONTROLLER_CHANGE_STATUS: number;
    HEADER_CHUNK_DIVISION: number[];
    HEADER_CHUNK_FORMAT0: number[];
    HEADER_CHUNK_FORMAT1: number[];
    HEADER_CHUNK_LENGTH: number[];
    HEADER_CHUNK_TYPE: number[];
    META_COPYRIGHT_ID: number;
    META_CUE_POINT: number;
    META_END_OF_TRACK_ID: number[];
    META_EVENT_ID: number;
    META_INSTRUMENT_NAME_ID: number;
    META_KEY_SIGNATURE_ID: number;
    META_LYRIC_ID: number;
    META_MARKER_ID: number;
    META_SMTPE_OFFSET: number;
    META_TEMPO_ID: number;
    META_TEXT_ID: number;
    META_TIME_SIGNATURE_ID: number;
    META_TRACK_NAME_ID: number;
    PROGRAM_CHANGE_STATUS: number;
    TRACK_CHUNK_TYPE: number[];
    VERSION: string;
};

export function ControllerChangeEvent(fields: any): void;

export function ProgramChangeEvent(fields: any): void;

export function Utils(): void;

export namespace ControllerChangeEvent {
    const prototype: {
    };

}

export namespace NoteEvent {
    function buildData(): any;

    namespace buildData {
        const prototype: {
        };

    }

}

export namespace ProgramChangeEvent {
    const prototype: {
    };

}

export namespace Track {
    function addCopyright(text: any): any;

    function addCuePoint(text: any): any;

    function addEvent(events: any, mapFunction: any): any;

    function addInstrumentName(text: any): any;

    function addLyric(text: any): any;

    function addMarker(text: any): any;

    function addText(text: any): any;

    function addTrackName(text: any): any;

    function buildData(): any;

    function mergeExplicitTickEvents(): any;

    function mergeSingleEvent(event: any): void;

    function mergeTrack(track: any): any;

    function polyModeOn(): any;

    function removeEventsByType(eventType: any): any;

    function setKeySignature(sf: any, mi: any): any;

    function setTempo(bpm: any): any;

    function setTimeSignature(numerator: any, denominator: any, midiclockspertick: any, notespermidiclock: any): any;

    namespace addCopyright {
        const prototype: {
        };

    }

    namespace addCuePoint {
        const prototype: {
        };

    }

    namespace addEvent {
        const prototype: {
        };

    }

    namespace addInstrumentName {
        const prototype: {
        };

    }

    namespace addLyric {
        const prototype: {
        };

    }

    namespace addMarker {
        const prototype: {
        };

    }

    namespace addText {
        const prototype: {
        };

    }

    namespace addTrackName {
        const prototype: {
        };

    }

    namespace buildData {
        const prototype: {
        };

    }

    namespace mergeExplicitTickEvents {
        const prototype: {
        };

    }

    namespace mergeSingleEvent {
        const prototype: {
        };

    }

    namespace mergeTrack {
        const prototype: {
        };

    }

    namespace polyModeOn {
        const prototype: {
        };

    }

    namespace removeEventsByType {
        const prototype: {
        };

    }

    namespace setKeySignature {
        const prototype: {
        };

    }

    namespace setTempo {
        const prototype: {
        };

    }

    namespace setTimeSignature {
        const prototype: {
        };

    }

}

export namespace Utils {
    const prototype: {
    };

    function convertVelocity(velocity: any): any;

    function getDurationMultiplier(duration: any): any;

    function getPitch(pitch: any): any;

    function getTickDuration(duration: any): any;

    function isNumeric(n: any): any;

    function numberFromBytes(bytes: any): any;

    function numberToBytes(number: any, bytesNeeded: any): any;

    function numberToVariableLength(ticks: any): any;

    function stringByteCount(s: any): any;

    function stringToBytes(string: any): any;

    function toArray(value: any): any;

    function version(): any;

    namespace convertVelocity {
        const prototype: {
        };

    }

    namespace getDurationMultiplier {
        const prototype: {
        };

    }

    namespace getPitch {
        const prototype: {
        };

    }

    namespace getTickDuration {
        const prototype: {
        };

    }

    namespace isNumeric {
        const prototype: {
        };

    }

    namespace numberFromBytes {
        const prototype: {
        };

    }

    namespace numberToBytes {
        const prototype: {
        };

    }

    namespace numberToVariableLength {
        const prototype: {
        };

    }

    namespace stringByteCount {
        const prototype: {
        };

    }

    namespace stringToBytes {
        const prototype: {
        };

    }

    namespace toArray {
        const prototype: {
        };

    }

    namespace version {
        const prototype: {
        };

    }

}

export namespace VexFlow {
    function convertDuration(note: any): any;

    function convertPitch(pitch: any): any;

    function trackFromVoice(voice: any): any;

    namespace convertDuration {
        const prototype: {
        };

    }

    namespace convertPitch {
        const prototype: {
        };

    }

    namespace trackFromVoice {
        const prototype: {
        };

    }

}

export namespace Writer {
    function base64(): any;

    function buildFile(): any;

    function dataUri(): any;

    function saveMIDI(filename: any): void;

    function stdout(): any;

    namespace base64 {
        const prototype: {
        };

    }

    namespace buildFile {
        const prototype: {
        };

    }

    namespace dataUri {
        const prototype: {
        };

    }

    namespace saveMIDI {
        const prototype: {
        };

    }

    namespace stdout {
        const prototype: {
        };

    }

}

